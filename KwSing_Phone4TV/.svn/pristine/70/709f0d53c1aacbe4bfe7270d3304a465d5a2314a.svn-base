/**
 * Copyright (c) 2005, Kuwo, Inc. All rights reserved. 
 */
package cn.kuwo.sing.phone4tv.view.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.format.DateUtils;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import cn.kuwo.sing.phone4tv.R;
import cn.kuwo.sing.phone4tv.bean.ImageObject;
import cn.kuwo.sing.phone4tv.bean.Mtv;
import cn.kuwo.sing.phone4tv.bean.PageData;
import cn.kuwo.sing.phone4tv.bean.UserMtv;
import cn.kuwo.sing.phone4tv.business.ListBusiness;
import cn.kuwo.sing.phone4tv.commmons.log.LogSystem;
import cn.kuwo.sing.phone4tv.commons.context.Constants;
import cn.kuwo.sing.phone4tv.commons.util.PageDataHandler;
import cn.kuwo.sing.phone4tv.view.adapter.DetailAdapter;
import cn.kuwo.sing.phone4tv.view.adapter.UserDetailAdapter;

import com.devspark.appmsg.AppMsg;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnLastItemVisibleListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nhaarman.listviewanimations.swinginadapters.prepared.SwingBottomInAnimationAdapter;


/**
 * 
 * @Package cn.kuwo.sing.phone4tv.view.fragment
 * 
 * @Date Mar 6, 2014 4:09:33 PM
 *
 * @Author wangming
 * 
 * @Parameters int pageFrom;</br>
 * 			ImageObject imageObject;
 *
 */
public class DetailFragment extends BaseProgressFragment {
	private static final String LOG_TAG = "DetailFragment";
	private View mContentView;
	private PullToRefreshListView mPullRefreshListView;
	private ListBusiness mListBusiness;
	private int mPageFrom;
	private ImageObject mImageObject;
	private DetailAdapter mDetailAdapter;
	private UserDetailAdapter mUserDetailAdapter;
	private int mCurrentPageNum = 1;
	private int mTotalPage = 1;
	private TextView empty;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		mContentView = inflater.inflate(R.layout.fragment_detail, null);
		return inflater.inflate(R.layout.fragment_progress_empty, container, false);
	}
	
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		// Setup content view
		setContentView(mContentView);
		// Setup text for empty content
		setEmptyText(R.string.load_data_fail);
		initData();
		initView();
		obtainData();
	}

	private void initData() {
		mListBusiness = new ListBusiness();
		Intent data = getActivity().getIntent();
		mPageFrom = data.getIntExtra("pageFrom", -1);
		mImageObject = (ImageObject) data.getSerializableExtra("imageObject");
		getActivity().setTitle(mImageObject.name);
	}
	
	private void initView() {
		mPullRefreshListView = (PullToRefreshListView) getActivity().findViewById(R.id.lvFragmentDetail);
		mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<ListView>() {
			@Override
			public void onRefresh(PullToRefreshBase<ListView> refreshView) {
				String label = DateUtils.formatDateTime(getActivity(), System.currentTimeMillis(),
						DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_ALL);

				// Update the LastUpdatedLabel
				refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);

				// Do work to refresh the list here.
				switch (refreshView.getCurrentMode()) {
				case PULL_FROM_START:
					toRefresh();
					break;
				case PULL_FROM_END:
					toLoadMore();
					break;

				default:
					break;
				}
			}
		});
		mPullRefreshListView.setOnLastItemVisibleListener(new OnLastItemVisibleListener() {

			@Override
			public void onLastItemVisible() {
				if(mTotalPage == mCurrentPageNum)
					AppMsg.makeText(getActivity(), "亲，没有更多了", AppMsg.STYLE_CONFIRM)
					.setLayoutGravity(Gravity.TOP)
					.show();
			}
		});
		
		if(mImageObject.type == Constants.MTV_CATEGORY_TYPE_USER) {
			
		}else {
			
		}
		
		ListView actualListView = mPullRefreshListView.getRefreshableView();
//		SwingBottomInAnimationAdapter swingBottomInAnimationAdapter = null;
		if(mImageObject.type == Constants.MTV_CATEGORY_TYPE_USER) {
			mUserDetailAdapter = new UserDetailAdapter(getActivity());
			actualListView.setAdapter(mUserDetailAdapter);
//			swingBottomInAnimationAdapter = new SwingBottomInAnimationAdapter(mUserDetailAdapter, 
//					Constants.LIST_ITEM_ANIMATION_DELAY, Constants.LIST_ITEM_ANIMATION_DURATION);
		}else {
			mDetailAdapter = new DetailAdapter(getActivity(), mPageFrom);
			actualListView.setAdapter(mDetailAdapter);
//			swingBottomInAnimationAdapter = new SwingBottomInAnimationAdapter(mDetailAdapter, 
//					Constants.LIST_ITEM_ANIMATION_DELAY, Constants.LIST_ITEM_ANIMATION_DURATION);
		}
//		swingBottomInAnimationAdapter.setAbsListView(actualListView);
//		actualListView.setAdapter(swingBottomInAnimationAdapter);
		
		empty = (TextView)getActivity().findViewById(android.R.id.empty);
		empty.setOnClickListener(mOnClickListener);
	}
	
	private View.OnClickListener mOnClickListener = new View.OnClickListener() {
		
		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case android.R.id.empty:
				toRefresh();
				break;

			default:
				break;
			}
		}
	};
	
	private void obtainData() {
		setContentShown(false);
		loadMtvList(1);
	}
	
	private void toRefresh() {
		if(mImageObject.type == Constants.MTV_CATEGORY_TYPE_USER)
			mUserDetailAdapter.clearMtvList();
		else
			mDetailAdapter.clearMtvList();
			
		loadMtvList(1);
	}
	
	private void toLoadMore() {
		loadMtvList(++mCurrentPageNum);
	}
	
	private void loadMtvList(int pageNum) {
		switch (mPageFrom) { 
		case Constants.PAGE_FROM_MTV_CATEGORY: //from mtvCategory
			int mtvCategoryType = mImageObject.type;
			switch (mtvCategoryType) {
			case Constants.MTV_CATEGORY_TYPE_USER:
				mListBusiness.getMtvPageData4User(pageNum, new UserDataHandler());
				break;
			case Constants.MTV_CATEGORY_TYPE_COMMON:
				mListBusiness.getMtvPageData4Common(mImageObject.id, pageNum, new DetailDataHandler());
				break;
			case Constants.MTV_CATEGORY_TYPE_LANGUAGE:
				mListBusiness.getMtvPageData4Language(mImageObject.id, pageNum, new DetailDataHandler());
				break;
			default:
				break;
			}
			break;
		case Constants.PAGE_FROM_SINGER: //from singer
			mListBusiness.getMtvPageData4Singer(mImageObject.name, pageNum, new DetailDataHandler());
			break;
		case Constants.PAGE_FROM_MTV_CATEGORY_ORDER: //from mtvCategoryOrder
			mListBusiness.getMtvPageData4Common(mImageObject.id, pageNum, new DetailDataHandler());
			break;
		default:
			break;
		}
	}
	
	private class UserDataHandler extends PageDataHandler<UserMtv> {
		
		@Override
		public void onSuccess(PageData<UserMtv> data) {
			LogSystem.d(LOG_TAG, "UserDataHandler onSuccess, pageData="+data.data);
			mTotalPage = data.total%Constants.PAGE_SIZE_DETAIL_MTV_LIST == 0 ? data.total/Constants.PAGE_SIZE_DETAIL_MTV_LIST : data.total/Constants.PAGE_SIZE_DETAIL_MTV_LIST+1;
			mCurrentPageNum = data.page;
			mUserDetailAdapter.setMtvData(mCurrentPageNum, data.data);
			if(getActivity() == null)
				return;
			getActivity().setTitle(mImageObject.name+"  [ "+mCurrentPageNum+"/"+mTotalPage+" ]");
			setContentEmpty(false);
			setContentShown(true);
		}
		
		@Override
		public void onFailure(Throwable error, String content) {
			LogSystem.e(LOG_TAG, "UserDataHandler onFailure, content="+content);
			if(mCurrentPageNum == 1) {
				;
			}else {
				AppMsg.makeText(getActivity(), "加载数据失败，请检查您的网络", AppMsg.STYLE_ALERT)
				.setLayoutGravity(Gravity.TOP)
				.show();
			}
		}
		
		@Override
		public void onFinish() {
			new Handler().postDelayed(new Runnable() {
				
				@Override
				public void run() {
					mPullRefreshListView.onRefreshComplete();
				}
			}, Constants.PTR_SHOW_DELAY_TIME);
		}
	}
	private class DetailDataHandler extends PageDataHandler<Mtv> {

		@Override
		public void onSuccess(PageData<Mtv> data) {
			LogSystem.d(LOG_TAG, "DetailDataHandler onSuccess, pageData="+data.data);
			switch (mPageFrom) {
			case Constants.PAGE_FROM_MTV_CATEGORY:
				mCurrentPageNum = data.page;
				break;
			case Constants.PAGE_FROM_SINGER:
				mCurrentPageNum = data.page + 1;
				break;
			case Constants.PAGE_FROM_MTV_CATEGORY_ORDER:
				mCurrentPageNum = data.page;
				break;
			default:
				break;
			}
			mTotalPage = data.total%Constants.PAGE_SIZE_DETAIL_MTV_LIST == 0 ? data.total/Constants.PAGE_SIZE_DETAIL_MTV_LIST : data.total/Constants.PAGE_SIZE_DETAIL_MTV_LIST+1;
			mDetailAdapter.setMtvData(mCurrentPageNum, data.data);
			if(getActivity() == null)
				return;
			getActivity().setTitle(mImageObject.name+"  [ "+mCurrentPageNum+"/"+mTotalPage+" ]");
			setContentEmpty(false);
			setContentShown(true);
		}
		
		@Override
		public void onFailure(Throwable error, String content) {
			LogSystem.e(LOG_TAG, "DetailDataHandler onFailure, content="+content);
			if(mCurrentPageNum == 1) {
				//setContentEmpty(true);
			}else {
				AppMsg.makeText(getActivity(), "加载数据失败，请检查您的网络", AppMsg.STYLE_ALERT)
				.setLayoutGravity(Gravity.TOP)
				.show();
			}
		}
		
		@Override
		public void onFinish() {
			new Handler().postDelayed(new Runnable() {
				
				@Override
				public void run() {
					mPullRefreshListView.onRefreshComplete();
				}
			}, Constants.PTR_SHOW_DELAY_TIME);
		}

	}
}
